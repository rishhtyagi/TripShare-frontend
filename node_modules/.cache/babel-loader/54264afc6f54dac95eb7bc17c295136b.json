{"ast":null,"code":"import * as BT from \"./bookTypes\";\nimport axios from 'axios';\nexport const saveBook = book => {\n  return dispatch => {\n    dispatch({\n      type: BT.SAVE_BOOK_REQUEST\n    });\n    axios.post(\"http://localhost:8081/rest/books\", book).then(response => {\n      dispatch(bookSuccess(response.data));\n    }).catch(error => {\n      dispatch(bookFailure(error));\n    });\n  };\n};\nexport const fetchBook = bookId => {\n  return dispatch => {\n    dispatch({\n      type: BT.FETCH_BOOK_REQUEST\n    });\n    axios.get(\"http://localhost:8081/rest/books/\" + bookId).then(response => {\n      dispatch(bookSuccess(response.data));\n    }).catch(error => {\n      dispatch(bookFailure(error));\n    });\n  };\n};\nexport const updateBook = book => {\n  return dispatch => {\n    dispatch({\n      type: BT.UPDATE_BOOK_REQUEST\n    });\n    axios.put(\"http://localhost:8081/rest/books\", book).then(response => {\n      dispatch(bookSuccess(response.data));\n    }).catch(error => {\n      dispatch(bookFailure(error));\n    });\n  };\n};\nexport const deleteBook = bookId => {\n  return dispatch => {\n    dispatch({\n      type: BT.DELETE_BOOK_REQUEST\n    });\n    axios.delete(\"http://localhost:8081/rest/books/\" + bookId).then(response => {\n      dispatch(bookSuccess(response.data));\n    }).catch(error => {\n      dispatch(bookFailure(error));\n    });\n  };\n};\n\nconst bookSuccess = book => {\n  return {\n    type: BT.BOOK_SUCCESS,\n    payload: book\n  };\n};\n\nconst bookFailure = error => {\n  return {\n    type: BT.BOOK_FAILURE,\n    payload: error\n  };\n};\n\nexport const fetchLanguages = () => {\n  return dispatch => {\n    dispatch({\n      type: BT.FETCH_LANGUAGES_REQUEST\n    });\n    axios.get(\"http://localhost:8081/rest/books/languages\").then(response => {\n      dispatch({\n        type: BT.LANGUAGES_SUCCESS,\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: BT.LANGUAGES_FAILURE,\n        payload: error\n      });\n    });\n  };\n};\nexport const fetchGenres = () => {\n  return dispatch => {\n    dispatch({\n      type: BT.FETCH_GENRES_REQUEST\n    });\n    axios.get(\"http://localhost:8081/rest/books/genres\").then(response => {\n      dispatch({\n        type: BT.GENRES_SUCCESS,\n        payload: response.data\n      });\n    }).catch(error => {\n      dispatch({\n        type: BT.GENRES_FAILURE,\n        payload: error\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/nayanchaturvedi/Documents/tripshare-master/src/services/book/bookActions.js"],"names":["BT","axios","saveBook","book","dispatch","type","SAVE_BOOK_REQUEST","post","then","response","bookSuccess","data","catch","error","bookFailure","fetchBook","bookId","FETCH_BOOK_REQUEST","get","updateBook","UPDATE_BOOK_REQUEST","put","deleteBook","DELETE_BOOK_REQUEST","delete","BOOK_SUCCESS","payload","BOOK_FAILURE","fetchLanguages","FETCH_LANGUAGES_REQUEST","LANGUAGES_SUCCESS","LANGUAGES_FAILURE","fetchGenres","FETCH_GENRES_REQUEST","GENRES_SUCCESS","GENRES_FAILURE"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,aAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,QAAQ,GAAGC,IAAI,IAAI;AAC5B,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,EAAE,CAACM;AADJ,KAAD,CAAR;AAGAL,IAAAA,KAAK,CAACM,IAAN,CAAW,kCAAX,EAA+CJ,IAA/C,EACKK,IADL,CACUC,QAAQ,IAAI;AACdL,MAAAA,QAAQ,CAACM,WAAW,CAACD,QAAQ,CAACE,IAAV,CAAZ,CAAR;AACH,KAHL,EAIKC,KAJL,CAIWC,KAAK,IAAI;AACZT,MAAAA,QAAQ,CAACU,WAAW,CAACD,KAAD,CAAZ,CAAR;AACH,KANL;AAOH,GAXD;AAYH,CAbM;AAeP,OAAO,MAAME,SAAS,GAAGC,MAAM,IAAI;AAC/B,SAAOZ,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,EAAE,CAACiB;AADJ,KAAD,CAAR;AAGAhB,IAAAA,KAAK,CAACiB,GAAN,CAAU,sCAAoCF,MAA9C,EACKR,IADL,CACUC,QAAQ,IAAI;AACdL,MAAAA,QAAQ,CAACM,WAAW,CAACD,QAAQ,CAACE,IAAV,CAAZ,CAAR;AACH,KAHL,EAIKC,KAJL,CAIWC,KAAK,IAAI;AACZT,MAAAA,QAAQ,CAACU,WAAW,CAACD,KAAD,CAAZ,CAAR;AACH,KANL;AAOH,GAXD;AAYH,CAbM;AAeP,OAAO,MAAMM,UAAU,GAAGhB,IAAI,IAAI;AAC9B,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,EAAE,CAACoB;AADJ,KAAD,CAAR;AAGAnB,IAAAA,KAAK,CAACoB,GAAN,CAAU,kCAAV,EAA8ClB,IAA9C,EACKK,IADL,CACUC,QAAQ,IAAI;AACdL,MAAAA,QAAQ,CAACM,WAAW,CAACD,QAAQ,CAACE,IAAV,CAAZ,CAAR;AACH,KAHL,EAIKC,KAJL,CAIWC,KAAK,IAAI;AACZT,MAAAA,QAAQ,CAACU,WAAW,CAACD,KAAD,CAAZ,CAAR;AACH,KANL;AAOH,GAXD;AAYH,CAbM;AAeP,OAAO,MAAMS,UAAU,GAAGN,MAAM,IAAI;AAChC,SAAOZ,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,EAAE,CAACuB;AADJ,KAAD,CAAR;AAGAtB,IAAAA,KAAK,CAACuB,MAAN,CAAa,sCAAoCR,MAAjD,EACKR,IADL,CACUC,QAAQ,IAAI;AACdL,MAAAA,QAAQ,CAACM,WAAW,CAACD,QAAQ,CAACE,IAAV,CAAZ,CAAR;AACH,KAHL,EAIKC,KAJL,CAIWC,KAAK,IAAI;AACZT,MAAAA,QAAQ,CAACU,WAAW,CAACD,KAAD,CAAZ,CAAR;AACH,KANL;AAOH,GAXD;AAYH,CAbM;;AAeP,MAAMH,WAAW,GAAGP,IAAI,IAAI;AACxB,SAAO;AACHE,IAAAA,IAAI,EAAEL,EAAE,CAACyB,YADN;AAEHC,IAAAA,OAAO,EAAEvB;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMW,WAAW,GAAGD,KAAK,IAAI;AACzB,SAAO;AACHR,IAAAA,IAAI,EAAEL,EAAE,CAAC2B,YADN;AAEHD,IAAAA,OAAO,EAAEb;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,MAAMe,cAAc,GAAG,MAAM;AAChC,SAAOxB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,EAAE,CAAC6B;AADJ,KAAD,CAAR;AAGA5B,IAAAA,KAAK,CAACiB,GAAN,CAAU,4CAAV,EACKV,IADL,CACUC,QAAQ,IAAI;AACdL,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEL,EAAE,CAAC8B,iBADJ;AAELJ,QAAAA,OAAO,EAAEjB,QAAQ,CAACE;AAFb,OAAD,CAAR;AAIH,KANL,EAOKC,KAPL,CAOWC,KAAK,IAAI;AACZT,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEL,EAAE,CAAC+B,iBADJ;AAELL,QAAAA,OAAO,EAAEb;AAFJ,OAAD,CAAR;AAIH,KAZL;AAaH,GAjBD;AAkBH,CAnBM;AAqBP,OAAO,MAAMmB,WAAW,GAAG,MAAM;AAC7B,SAAO5B,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAAC;AACLC,MAAAA,IAAI,EAAEL,EAAE,CAACiC;AADJ,KAAD,CAAR;AAGAhC,IAAAA,KAAK,CAACiB,GAAN,CAAU,yCAAV,EACKV,IADL,CACUC,QAAQ,IAAI;AACdL,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEL,EAAE,CAACkC,cADJ;AAELR,QAAAA,OAAO,EAAEjB,QAAQ,CAACE;AAFb,OAAD,CAAR;AAIH,KANL,EAOKC,KAPL,CAOWC,KAAK,IAAI;AACZT,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEL,EAAE,CAACmC,cADJ;AAELT,QAAAA,OAAO,EAAEb;AAFJ,OAAD,CAAR;AAIH,KAZL;AAaH,GAjBD;AAkBH,CAnBM","sourcesContent":["import * as BT from \"./bookTypes\";\nimport axios from 'axios';\n\nexport const saveBook = book => {\n    return dispatch => {\n        dispatch({\n            type: BT.SAVE_BOOK_REQUEST\n        });\n        axios.post(\"http://localhost:8081/rest/books\", book)\n            .then(response => {\n                dispatch(bookSuccess(response.data));\n            })\n            .catch(error => {\n                dispatch(bookFailure(error));\n            });\n    };\n};\n\nexport const fetchBook = bookId => {\n    return dispatch => {\n        dispatch({\n            type: BT.FETCH_BOOK_REQUEST\n        });\n        axios.get(\"http://localhost:8081/rest/books/\"+bookId)\n            .then(response => {\n                dispatch(bookSuccess(response.data));\n            })\n            .catch(error => {\n                dispatch(bookFailure(error));\n            });\n    };\n};\n\nexport const updateBook = book => {\n    return dispatch => {\n        dispatch({\n            type: BT.UPDATE_BOOK_REQUEST\n        });\n        axios.put(\"http://localhost:8081/rest/books\", book)\n            .then(response => {\n                dispatch(bookSuccess(response.data));\n            })\n            .catch(error => {\n                dispatch(bookFailure(error));\n            });\n    };\n};\n\nexport const deleteBook = bookId => {\n    return dispatch => {\n        dispatch({\n            type: BT.DELETE_BOOK_REQUEST\n        });\n        axios.delete(\"http://localhost:8081/rest/books/\"+bookId)\n            .then(response => {\n                dispatch(bookSuccess(response.data));\n            })\n            .catch(error => {\n                dispatch(bookFailure(error));\n            });\n    };\n};\n\nconst bookSuccess = book => {\n    return {\n        type: BT.BOOK_SUCCESS,\n        payload: book\n    };\n};\n\nconst bookFailure = error => {\n    return {\n        type: BT.BOOK_FAILURE,\n        payload: error\n    };\n};\n\nexport const fetchLanguages = () => {\n    return dispatch => {\n        dispatch({\n            type: BT.FETCH_LANGUAGES_REQUEST\n        });\n        axios.get(\"http://localhost:8081/rest/books/languages\")\n            .then(response => {\n                dispatch({\n                    type: BT.LANGUAGES_SUCCESS,\n                    payload: response.data\n                });\n            })\n            .catch(error => {\n                dispatch({\n                    type: BT.LANGUAGES_FAILURE,\n                    payload: error\n                });\n            });\n    };\n};\n\nexport const fetchGenres = () => {\n    return dispatch => {\n        dispatch({\n            type: BT.FETCH_GENRES_REQUEST\n        });\n        axios.get(\"http://localhost:8081/rest/books/genres\")\n            .then(response => {\n                dispatch({\n                    type: BT.GENRES_SUCCESS,\n                    payload: response.data\n                });\n            })\n            .catch(error => {\n                dispatch({\n                    type: BT.GENRES_FAILURE,\n                    payload: error\n                });\n            });\n    };\n};"]},"metadata":{},"sourceType":"module"}