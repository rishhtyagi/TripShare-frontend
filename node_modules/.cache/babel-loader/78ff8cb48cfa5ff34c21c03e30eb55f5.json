{"ast":null,"code":"import * as AT from \"./authTypes\";\nimport axios from \"axios\";\nexport const authenticateUser = (email, password) => {\n  const credentials = {\n    email: email,\n    password: password\n  };\n  return dispatch => {\n    dispatch({\n      type: AT.LOGIN_REQUEST\n    });\n    axios.post(\"http://localhost:8080/rest/user/authenticate\", credentials).then(response => {\n      let token = response.data.token;\n      localStorage.setItem(\"jwtToken\", token);\n      dispatch(success(true));\n    }).catch(error => {\n      dispatch(failure());\n    });\n  };\n};\nexport const logoutUser = () => {\n  return dispatch => {\n    dispatch({\n      type: AT.LOGOUT_REQUEST\n    });\n    localStorage.removeItem(\"jwtToken\");\n    dispatch(success(false));\n  };\n};\n\nconst success = isLoggedIn => {\n  return {\n    type: AT.SUCCESS,\n    payload: isLoggedIn\n  };\n};\n\nconst failure = () => {\n  return {\n    type: AT.FAILURE,\n    payload: false\n  };\n};","map":{"version":3,"sources":["/home/nayanchaturvedi/Documents/tripshare-master/src/services/user/auth/authActions.js"],"names":["AT","axios","authenticateUser","email","password","credentials","dispatch","type","LOGIN_REQUEST","post","then","response","token","data","localStorage","setItem","success","catch","error","failure","logoutUser","LOGOUT_REQUEST","removeItem","isLoggedIn","SUCCESS","payload","FAILURE"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,aAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACnD,QAAMC,WAAW,GAAG;AAClBF,IAAAA,KAAK,EAAEA,KADW;AAElBC,IAAAA,QAAQ,EAAEA;AAFQ,GAApB;AAIA,SAAQE,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,EAAE,CAACQ;AADF,KAAD,CAAR;AAGAP,IAAAA,KAAK,CACFQ,IADH,CACQ,8CADR,EACwDJ,WADxD,EAEGK,IAFH,CAESC,QAAD,IAAc;AAClB,UAAIC,KAAK,GAAGD,QAAQ,CAACE,IAAT,CAAcD,KAA1B;AACAE,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,KAAjC;AACAN,MAAAA,QAAQ,CAACU,OAAO,CAAC,IAAD,CAAR,CAAR;AACD,KANH,EAOGC,KAPH,CAOUC,KAAD,IAAW;AAChBZ,MAAAA,QAAQ,CAACa,OAAO,EAAR,CAAR;AACD,KATH;AAUD,GAdD;AAeD,CApBM;AAsBP,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,SAAQd,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,EAAE,CAACqB;AADF,KAAD,CAAR;AAGAP,IAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB;AACAhB,IAAAA,QAAQ,CAACU,OAAO,CAAC,KAAD,CAAR,CAAR;AACD,GAND;AAOD,CARM;;AAUP,MAAMA,OAAO,GAAIO,UAAD,IAAgB;AAC9B,SAAO;AACLhB,IAAAA,IAAI,EAAEP,EAAE,CAACwB,OADJ;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMJ,OAAO,GAAG,MAAM;AACpB,SAAO;AACLZ,IAAAA,IAAI,EAAEP,EAAE,CAAC0B,OADJ;AAELD,IAAAA,OAAO,EAAE;AAFJ,GAAP;AAID,CALD","sourcesContent":["import * as AT from \"./authTypes\";\nimport axios from \"axios\";\n\nexport const authenticateUser = (email, password) => {\n  const credentials = {\n    email: email,\n    password: password,\n  };\n  return (dispatch) => {\n    dispatch({\n      type: AT.LOGIN_REQUEST,\n    });\n    axios\n      .post(\"http://localhost:8080/rest/user/authenticate\", credentials)\n      .then((response) => {\n        let token = response.data.token;\n        localStorage.setItem(\"jwtToken\", token);\n        dispatch(success(true));\n      })\n      .catch((error) => {\n        dispatch(failure());\n      });\n  };\n};\n\nexport const logoutUser = () => {\n  return (dispatch) => {\n    dispatch({\n      type: AT.LOGOUT_REQUEST,\n    });\n    localStorage.removeItem(\"jwtToken\");\n    dispatch(success(false));\n  };\n};\n\nconst success = (isLoggedIn) => {\n  return {\n    type: AT.SUCCESS,\n    payload: isLoggedIn,\n  };\n};\n\nconst failure = () => {\n  return {\n    type: AT.FAILURE,\n    payload: false,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}